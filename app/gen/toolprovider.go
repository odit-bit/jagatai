// In app/gen/toolprovider.go
package main

import (
	"bytes"
	"fmt"
	"html/template"
	"log"
	"os"

	"gopkg.in/yaml.v3"
)

const templ = `// Code generated by go generate; DO NOT EDIT.
package toolprovider

import (
{{- range .Imports}}
	_ "{{.}}"
{{- end}}
)
`

// Config matches the structure of our tools.yaml file.
type Config struct {
	Imports []string `yaml:"imports"`
}

func main() {
	// Read the explicit list of tools from the config file (tools.yaml).
	configFile, err := os.ReadFile("agent/toolprovider/tools.yaml")
	if err != nil {
		log.Fatalf("Failed to read tool provider config file: %v", err)
	}

	var config Config
	if err := yaml.Unmarshal(configFile, &config); err != nil {
		log.Fatalf("Failed to unmarshal tool provider config: %v", err)
	}

	// Prepare the template.
	t := template.Must(template.New("agg").Parse(templ))
	var out bytes.Buffer

	// Execute the template with the list of imports.
	if err := t.Execute(&out, config); err != nil {
		log.Fatalf("Failed to execute template: %v", err)
	}

	// Write the generated file.
	err = os.WriteFile("agent/toolprovider/init-gen.go", out.Bytes(), 0644)
	if err != nil {
		log.Fatalf("Failed to write generated file: %v", err)
	}

	fmt.Println("Successfully generated toolprovider imports.")
}
